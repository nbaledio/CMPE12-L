41 2 0
38 1
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 116 44 0 \NUL
Baledio, Nathan
22 8 96 68 76 0 \NUL
nbaledio
22 40 568 128 548 0 \NUL
Part A Output
8 64 176 113 127 1 0
8 64 216 113 167 1 0
8 64 256 113 207 1 0
11 188 485 215 387 0 1
7 360 512 409 463 0 1
22 288 568 378 548 0 \NUL
Part B Output
20 160 144 219 125 0
in_3
20 160 184 219 165 0
in_2
20 160 224 219 205 0
in_1
8 64 296 113 247 1 0
20 160 264 219 245 0
in_0
19 98 369 157 350 0
a_3
19 80 392 139 373 0
a_2
19 64 416 123 397 0
a_1
19 48 440 107 421 0
a_0
19 296 480 355 461 0
b
22 40 592 211 572 0 \NUL
Counts switches in binary
22 40 616 206 596 0 \NUL
(with in_3 being the most
22 288 592 492 572 0 \NUL
Output lights up when segment
7 576 432 625 383 0 1
7 576 472 625 423 0 1
7 576 512 625 463 0 1
19 488 400 547 381 0
c_2
19 488 440 547 421 0
c_1
19 488 480 547 461 0
c_0
22 632 496 696 476 0 \NUL
SOP/POS
22 632 456 708 436 0 \NUL
NAND Only
22 632 416 785 396 0 \NUL
NOR Only (extra credit)
22 288 616 462 596 0 \NUL
display is 11 (b) or higher.
22 536 568 625 548 0 \NUL
Part C Output
22 536 592 792 572 0 \NUL
c_0 and c_1 only light up when display
22 536 616 775 596 0 \NUL
is 1, 5, 6, and 7. c_0 is implemented
22 39 642 258 622 0 \NUL
bit) and represents the number in
22 39 666 130 646 0 \NUL
hexadecimal.
22 286 640 452 620 0 \NUL
Otherwise, it remains off.
22 537 641 734 621 0 \NUL
using Sum of Products. c_1 is
22 537 666 748 646 0 \NUL
implemented by converting c_0,
22 537 691 719 671 0 \NUL
but using only NAND gates.
1 110 271 161 254
1 161 214 110 231
1 161 174 110 191
1 161 134 110 151
1 189 451 154 359
1 189 457 136 382
1 189 463 120 406
1 189 469 104 430
1 361 487 352 470
1 544 390 577 407
1 544 430 577 447
1 544 470 577 487
38 2
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 116 44 0 \NUL
Baledio, Nathan
22 8 96 68 76 0 \NUL
nbaledio
19 303 237 362 218 0
in_3
19 303 333 362 314 0
in_0
19 302 268 361 249 0
in_2
19 302 301 361 282 0
in_1
20 424 225 483 206 0
a_3
20 426 253 485 234 0
a_2
20 424 288 483 269 0
a_1
20 423 320 482 301 0
a_0
22 371 148 413 128 0 \NUL
Part A
22 71 369 758 349 0 \NUL
Part A is quite simple. Four receivers are listed to receive inputs from the switches on the template page. 
22 70 394 753 374 0 \NUL
These receivers are connected to senders that send their inputs to the receivers on the segment display 
22 70 418 214 398 0 \NUL
on the template page.
1 359 227 425 215
1 358 258 427 243
1 358 291 425 278
1 359 323 424 310
38 3
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 116 44 0 \NUL
Baledio, Nathan
22 8 96 68 76 0 \NUL
nbaledio
22 371 148 415 128 0 \NUL
Part B
20 584 280 643 261 0
b
19 238 209 297 190 0
in_3
19 229 395 288 376 0
in_0
19 236 263 295 244 0
in_2
19 234 355 293 336 0
in_1
3 357 256 406 207 0 0
3 352 380 401 331 1 0
19 234 316 293 297 0
in_3
4 478 295 527 246 0 0
22 27 435 783 415 0 \NUL
For Part B, I found a simple solution. In binary, numbers 12-15 all start with "11" so the top half checks for this input.
22 26 461 779 441 0 \NUL
Now, all that's left is to account for the number 11 itself. To do this, the bottom half checks to see if inputs 3,1, and 0
22 26 488 726 468 0 \NUL
are true. If they are, then the number is "1111" (15)  or "1011" (11) both of which are in the range to light up. 
1 294 199 358 217
1 292 253 358 245
1 290 306 353 341
1 290 345 353 355
1 353 369 285 385
1 403 231 479 256
1 479 284 398 355
1 524 270 585 270
38 4
22 371 148 486 128 0 \NUL
Part C (SOP/POS)
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 116 44 0 \NUL
Baledio, Nathan
22 8 96 68 76 0 \NUL
nbaledio
20 691 317 750 298 0
c_0
19 51 155 110 136 0
in_3
19 48 275 107 256 0
in_0
19 49 199 108 180 0
in_2
19 50 240 109 221 0
in_1
19 50 322 109 303 0
in_3
19 49 417 108 398 0
in_0
19 48 352 107 333 0
in_2
19 48 385 107 366 0
in_1
19 46 464 105 445 0
in_3
19 46 560 105 541 0
in_0
19 45 495 104 476 0
in_2
19 45 528 104 509 0
in_1
19 46 615 105 596 0
in_3
19 46 711 105 692 0
in_0
19 45 646 104 627 0
in_2
19 45 679 104 660 0
in_1
3 256 190 305 141 0 0
3 253 276 302 227 0 0
3 256 489 305 440 0 0
3 349 233 398 184 0 0
5 147 170 196 121 0
5 144 214 193 165 0
5 144 255 193 206 0
3 255 350 304 301 0 0
3 255 411 304 362 0 0
5 142 335 191 286 0
5 141 403 190 354 0
3 350 377 399 328 0 0
3 255 559 304 510 0 0
3 255 633 304 584 0 0
3 252 714 301 665 0 0
5 140 636 189 587 0
5 139 478 188 429 0
5 140 572 189 523 0
3 349 522 398 473 0 0
3 351 669 400 620 0 0
4 613 332 662 283 2 0
22 18 743 763 723 0 \NUL
Part C uses Sum of Products. Each part describes the four possible combinations when the output is 1. From top to
22 18 764 740 744 0 \NUL
bottom, it shows "0001", "0101", "0110", and "0111". These parts will only output 1 when these specific binary 
22 18 787 343 767 0 \NUL
numbers are the inputs. Otherwise it will output 0.
1 107 145 148 145
1 105 189 145 189
1 106 230 145 230
1 193 145 257 151
1 190 189 257 179
1 190 230 254 237
1 104 265 254 265
1 302 165 350 194
1 299 251 350 222
1 106 312 143 310
1 104 342 256 339
1 188 310 256 311
1 104 375 142 378
1 187 378 256 372
1 105 407 256 400
1 301 325 351 338
1 301 386 351 366
1 102 454 140 453
1 185 453 257 450
1 257 478 101 485
1 101 518 256 520
1 102 550 141 547
1 186 547 256 548
1 102 605 141 611
1 186 611 256 594
1 256 622 101 636
1 101 669 253 675
1 102 701 253 703
1 302 464 350 483
1 350 511 301 534
1 301 608 352 630
1 352 658 298 689
1 395 208 614 293
1 396 352 614 302
1 614 312 395 497
1 614 321 397 644
1 659 307 692 307
38 5
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 116 44 0 \NUL
Baledio, Nathan
22 8 96 68 76 0 \NUL
nbaledio
19 9 709 68 690 0
in_0
19 8 677 67 658 0
in_1
19 12 159 71 140 0
in_3
19 12 282 71 263 0
in_0
19 12 200 71 181 0
in_2
19 12 244 71 225 0
in_1
19 13 320 72 301 0
in_3
19 12 415 71 396 0
in_0
19 11 350 70 331 0
in_2
19 11 383 70 364 0
in_1
19 9 462 68 443 0
in_3
19 9 558 68 539 0
in_0
19 8 493 67 474 0
in_2
19 8 526 67 507 0
in_1
19 9 613 68 594 0
in_3
19 9 709 68 690 0
in_0
19 8 644 67 625 0
in_2
19 8 677 67 658 0
in_1
3 233 202 282 153 0 0
3 232 284 281 235 0 0
3 350 286 399 237 0 0
3 355 201 404 152 0 0
5 293 285 342 236 0
5 292 202 341 153 0
5 415 197 464 148 0
5 414 286 463 237 0
5 145 172 194 123 0
5 140 220 189 171 0
5 146 263 195 214 0
3 470 257 519 208 0 0
3 584 258 633 209 0 0
5 640 258 689 209 0
5 529 256 578 207 0
5 141 336 190 287 0
5 148 400 197 351 0
3 227 362 276 313 0 0
3 228 420 277 371 0 0
3 351 361 400 312 0 0
3 350 423 399 374 0 0
3 468 389 517 340 0 0
3 578 391 627 342 0 0
5 291 362 340 313 0
5 293 422 342 373 0
5 414 361 463 312 0
5 413 423 462 374 0
5 523 388 572 339 0
5 652 392 701 343 0
5 150 632 199 583 0
3 216 661 265 612 0 0
3 215 724 264 675 0 0
3 347 660 396 611 0 0
3 347 727 396 678 0 0
3 469 687 518 638 0 0
3 583 686 632 637 0 0
5 279 659 328 610 0
5 279 727 328 678 0
5 408 659 457 610 0
5 406 727 455 678 0
5 524 687 573 638 0
5 643 683 692 634 0
5 141 482 190 433 0
5 137 575 186 526 0
3 232 507 281 458 0 0
3 223 573 272 524 0 0
3 344 508 393 459 0 0
3 341 570 390 521 0 0
3 475 534 524 485 0 0
3 592 533 641 484 0 0
5 656 532 705 483 0
5 536 533 585 484 0
5 407 506 456 457 0
5 404 567 453 518 0
5 282 570 331 521 0
5 285 508 334 459 0
22 371 148 464 128 0 \NUL
Part C (NAND)
22 10 747 790 727 0 \NUL
This part uses NAND gates only. NAND is logically equivalent to AND if you take an AND gate, change it to a NAND gate,
22 10 769 769 749 0 \NUL
and then connect that gate to another NAND gate (AND = NAND -> NAND). Using this conversion, I took my setup from
22 8 792 682 772 0 \NUL
my Sum of Products and converted the AND gates. Each is sent to a sender, continued on the next page
20 722 518 781 499 0
out_1
20 719 379 778 360 0
out_2
20 708 245 767 226 0
out_3
20 715 666 774 647 0
out_0
3 82 172 131 123 0 0
3 81 219 130 170 0 0
3 78 264 127 215 0 0
3 82 337 131 288 0 0
3 84 401 133 352 0 0
3 77 480 126 431 0 0
3 81 574 130 525 0 0
3 91 631 140 582 0 0
1 192 238 233 245
1 186 195 234 191
1 234 163 191 147
1 279 177 293 177
1 338 177 356 162
1 338 177 356 190
1 339 260 351 247
1 351 275 339 260
1 294 260 278 259
1 233 273 68 272
1 401 176 416 172
1 415 261 396 261
1 461 172 471 218
1 471 246 460 261
1 516 232 530 231
1 575 231 585 219
1 575 231 585 247
1 630 233 641 233
1 228 351 67 340
1 187 311 228 323
1 229 381 194 375
1 229 409 68 405
1 274 395 294 397
1 273 337 292 337
1 337 337 352 322
1 337 337 352 350
1 339 397 351 384
1 339 397 351 412
1 396 398 414 398
1 397 336 415 336
1 460 336 469 350
1 469 378 459 398
1 514 364 524 363
1 569 363 579 352
1 569 363 579 380
1 624 366 653 367
1 196 607 217 622
1 217 650 64 634
1 64 667 216 685
1 216 713 65 699
1 262 636 280 634
1 261 699 280 702
1 325 702 348 688
1 325 702 348 716
1 325 634 348 649
1 325 634 348 621
1 393 702 407 702
1 393 635 409 634
1 470 676 452 702
1 470 648 454 634
1 515 662 525 662
1 570 662 584 647
1 570 662 584 675
1 629 661 644 658
1 187 457 233 468
1 64 483 233 496
1 64 516 224 534
1 224 562 183 550
1 278 482 286 483
1 331 483 345 469
1 331 483 345 497
1 328 545 342 531
1 328 545 342 559
1 283 545 269 548
1 387 545 405 542
1 453 481 476 495
1 476 523 450 542
1 408 481 390 483
1 521 509 537 508
1 582 508 593 522
1 638 508 657 507
1 582 508 593 494
1 689 658 716 656
1 702 507 723 508
1 698 367 720 369
1 686 233 709 235
1 83 133 68 149
1 83 161 68 149
1 146 147 128 147
1 141 195 127 194
1 124 239 147 238
1 79 225 68 234
1 68 234 79 253
1 83 298 69 310
1 142 311 128 312
1 69 310 83 326
1 85 362 67 373
1 149 375 130 376
1 67 373 85 390
1 78 441 65 452
1 142 457 123 455
1 65 452 78 469
1 82 535 65 548
1 82 563 65 548
1 138 550 127 549
1 151 607 137 606
1 65 603 92 592
1 65 603 92 620
1 68 190 82 180
1 82 208 68 190
38 6
20 706 287 765 268 0
c_1
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 116 44 0 \NUL
Baledio, Nathan
22 8 96 68 76 0 \NUL
nbaledio
22 371 148 464 128 0 \NUL
Part C (NAND)
19 188 409 247 390 0
out_0
19 186 292 245 273 0
out_2
19 188 344 247 325 0
out_1
19 189 238 248 219 0
out_3
3 366 253 415 204 0 0
3 364 306 413 257 0 0
5 432 253 481 204 0
5 428 306 477 257 0
5 640 302 689 253 0
3 586 302 635 253 2 0
3 364 368 413 319 0 0
3 359 431 408 382 0 0
5 430 367 479 318 0
5 426 432 475 383 0
22 19 454 768 434 0 \NUL
From the previous page, all four parts are converted from their Sum of Products equivalents. Now all that's left is to
22 18 476 762 456 0 \NUL
convert the OR gate using NAND gates. OR is logically equivalent to NAND gates connected to another NAND gate.
22 18 498 648 478 0 \NUL
So, I put the outputs through one more NAND gate, and connected them to a four input NAND gate
1 412 228 433 228
1 410 281 429 281
1 686 277 707 277
1 245 228 367 214
1 245 228 367 242
1 242 282 365 267
1 365 295 242 282
1 244 334 365 329
1 244 334 365 357
1 244 399 360 392
1 244 399 360 420
1 405 406 427 407
1 410 343 431 342
1 472 407 587 291
1 476 342 587 282
1 587 272 474 281
1 478 228 587 263
1 632 277 641 277
38 7
20 384 246 443 227 0
c_2
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 116 44 0 \NUL
Baledio, Nathan
22 8 96 68 76 0 \NUL
nbaledio
22 371 148 456 128 0 \NUL
Part C (NOR)
22 330 329 503 309 0 \NUL
I did not do an NOR circuit
39 16777215
47 0
40 1 8 8
50 800 800
51 1 30
30
System
20
700
0
0
1
2
2
34
